https://www.geeksforgeeks.org/problems/merge-two-sorted-linked-lists/1
//1.my soln
/* Link list Node
struct Node {
  int data;
  struct Node *next;

  Node(int x) {
    data = x;
    next = NULL;
  }
};
*/
class Solution {
  public:
    Node* sortedMerge(Node* head1, Node* head2) {
        // code here
        vector<int>res;
        Node *temp1=head1;
        Node *temp2=head2;
        int n;
        while(temp1!=NULL)
        {
            res.push_back(temp1->data);
            temp1=temp1->next;
        }
            while(temp2!=NULL)
            {
               res.push_back(temp2->data);
                temp2=temp2->next;
            }
        sort(res.begin(),res.end());
        temp1=head1;
        for(int i=0;i<res.size();i++)
        {
            
            if(temp1!=NULL)
            {
                temp1->data=res[i];
                 temp2=temp1;
                temp1=temp1->next;
                 
            }
            else{
            Node *newnode=new Node(res[i]);
            temp2->next=newnode;
            temp2=newnode;
            }
        }
        return head1;
    }
};
//2.nandy's soln
Node* sortedMerge(Node* head1, Node* head2)  
{  
    // code here
     Node *temp1, *temp2, *temp3,*head3;
    temp1=head1,temp2=head2;
    if(head1->data<head2->data){
        head3=head1;
       temp3=head1;
       temp1=temp1->next;
    }
    else{
        head3=head2;
      temp3=head2;
      temp2=head2->next;
    }
    while(temp1!=NULL && temp2!=NULL){
        if(temp1->data<temp2->data){
            temp3->next=temp1;
            temp3=temp3->next;
            temp1=temp1->next;
        }
        else{
            temp3->next=temp2;
            temp3=temp3->next;
            temp2=temp2->next;
        }
    }
    if(temp1!=NULL){
        temp3->next=temp1;
    }
    else if(temp2!=NULL){
        temp3->next=temp2;
    }
    
    return head3;
}  
